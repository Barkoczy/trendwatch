import { useState, useEffect } from 'react';
import { getCache, setCache } from '@/libs/RedisClient';

interface Video {
  id: string;
  snippet: {
    title: string;
    thumbnails: {
      high: {
        url: string;
      };
    };
    channelTitle: string;
  };
}

interface UseYouTubeTrendingProps {
  regionCode: string;
  maxResults: number;
  includeShorts: boolean;
}

export function useYouTubeTrending({
  regionCode,
  maxResults,
  includeShorts,
}: UseYouTubeTrendingProps) {
  const [videos, setVideos] = useState<Video[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchVideos = async () => {
      setIsLoading(true);
      setError(null);

      const cacheKey = `youtube:trending:${regionCode}:${maxResults}:${includeShorts}`;
      let cachedData: string | null = null;

      try {
        // üõ† Sk√∫sime najsk√¥r naƒç√≠ta≈• z Redis cache
        cachedData = await getCache(cacheKey);

        if (!cachedData) {
          console.warn(
            '‚ö†Ô∏è Redis nie je dostupn√Ω alebo cache neexistuje, vol√°m API...'
          );

          // üõ† Zavol√°me API priamo, ak Redis nefunguje alebo cache ch√Ωba
          const response = await fetch(
            `/api/trending?regionCode=${regionCode}&maxResults=${maxResults}&includeShorts=${includeShorts}`,
            { next: { revalidate: 3600 } } // Cacheujeme odpoveƒè na 1 hodinu
          );

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nepodarilo sa naƒç√≠ta≈• vide√°');
          }

          const data = await response.json();

          if (
            !data.items ||
            !Array.isArray(data.items) ||
            data.items.length === 0
          ) {
            throw new Error('Neboli n√°jden√© ≈æiadne vide√° pre zvolen√Ω regi√≥n.');
          }

          cachedData = JSON.stringify(data.items);

          // üõ† Ak Redis funguje, ulo≈æ√≠me tam d√°ta
          await setCache(cacheKey, cachedData, 3600);
        }

        setVideos(JSON.parse(cachedData));
      } catch (err) {
        console.error('‚ùå Chyba pri naƒç√≠tan√≠:', err);
        setError(err instanceof Error ? err.message : 'Vyskytla sa chyba');
        setVideos([]); // Zabezpeƒç√≠me, ≈æe sa nezobraz√≠ star√Ω obsah
      } finally {
        setIsLoading(false);
      }
    };

    fetchVideos();
  }, [regionCode, maxResults, includeShorts]);

  return { videos, isLoading, error };
}
